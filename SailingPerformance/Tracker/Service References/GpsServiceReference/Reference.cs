//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tracker.GpsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddDataRequest", Namespace="http://schemas.datacontract.org/2004/07/WcfService.Services.GpsService.Requests")]
    [System.SerializableAttribute()]
    public partial class AddDataRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Tracker.GpsServiceReference.GpsData[] GpsDataListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdBoatField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Tracker.GpsServiceReference.GpsData[] GpsDataList {
            get {
                return this.GpsDataListField;
            }
            set {
                if ((object.ReferenceEquals(this.GpsDataListField, value) != true)) {
                    this.GpsDataListField = value;
                    this.RaisePropertyChanged("GpsDataList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid IdBoat {
            get {
                return this.IdBoatField;
            }
            set {
                if ((this.IdBoatField.Equals(value) != true)) {
                    this.IdBoatField = value;
                    this.RaisePropertyChanged("IdBoat");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GpsData", Namespace="http://schemas.datacontract.org/2004/07/WcfService.Services.GpsService.Requests")]
    [System.SerializableAttribute()]
    public partial class GpsData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BoatDirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BoatSpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GeoHeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GeoWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SecondsFromStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WindDirectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WindSpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BoatDirection {
            get {
                return this.BoatDirectionField;
            }
            set {
                if ((this.BoatDirectionField.Equals(value) != true)) {
                    this.BoatDirectionField = value;
                    this.RaisePropertyChanged("BoatDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double BoatSpeed {
            get {
                return this.BoatSpeedField;
            }
            set {
                if ((this.BoatSpeedField.Equals(value) != true)) {
                    this.BoatSpeedField = value;
                    this.RaisePropertyChanged("BoatSpeed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GeoHeight {
            get {
                return this.GeoHeightField;
            }
            set {
                if ((object.ReferenceEquals(this.GeoHeightField, value) != true)) {
                    this.GeoHeightField = value;
                    this.RaisePropertyChanged("GeoHeight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GeoWidth {
            get {
                return this.GeoWidthField;
            }
            set {
                if ((object.ReferenceEquals(this.GeoWidthField, value) != true)) {
                    this.GeoWidthField = value;
                    this.RaisePropertyChanged("GeoWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SecondsFromStart {
            get {
                return this.SecondsFromStartField;
            }
            set {
                if ((this.SecondsFromStartField.Equals(value) != true)) {
                    this.SecondsFromStartField = value;
                    this.RaisePropertyChanged("SecondsFromStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WindDirection {
            get {
                return this.WindDirectionField;
            }
            set {
                if ((this.WindDirectionField.Equals(value) != true)) {
                    this.WindDirectionField = value;
                    this.RaisePropertyChanged("WindDirection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WindSpeed {
            get {
                return this.WindSpeedField;
            }
            set {
                if ((this.WindSpeedField.Equals(value) != true)) {
                    this.WindSpeedField = value;
                    this.RaisePropertyChanged("WindSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseResponse", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class BaseResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccess {
            get {
                return this.IsSuccessField;
            }
            set {
                if ((this.IsSuccessField.Equals(value) != true)) {
                    this.IsSuccessField = value;
                    this.RaisePropertyChanged("IsSuccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GpsServiceReference.IGpsService")]
    public interface IGpsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsService/AddData", ReplyAction="http://tempuri.org/IGpsService/AddDataResponse")]
        Tracker.GpsServiceReference.BaseResponse AddData(Tracker.GpsServiceReference.AddDataRequest addDataRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGpsService/AddData", ReplyAction="http://tempuri.org/IGpsService/AddDataResponse")]
        System.Threading.Tasks.Task<Tracker.GpsServiceReference.BaseResponse> AddDataAsync(Tracker.GpsServiceReference.AddDataRequest addDataRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGpsServiceChannel : Tracker.GpsServiceReference.IGpsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GpsServiceClient : System.ServiceModel.ClientBase<Tracker.GpsServiceReference.IGpsService>, Tracker.GpsServiceReference.IGpsService {
        
        public GpsServiceClient() {
        }
        
        public GpsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GpsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GpsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GpsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tracker.GpsServiceReference.BaseResponse AddData(Tracker.GpsServiceReference.AddDataRequest addDataRequest) {
            return base.Channel.AddData(addDataRequest);
        }
        
        public System.Threading.Tasks.Task<Tracker.GpsServiceReference.BaseResponse> AddDataAsync(Tracker.GpsServiceReference.AddDataRequest addDataRequest) {
            return base.Channel.AddDataAsync(addDataRequest);
        }
    }
}
